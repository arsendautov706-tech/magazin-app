document.addEventListener('DOMContentLoaded', async () => {
  try {
    const res = await fetch('/session', { credentials: 'include' });
    const data = await res.json();

    if (!data.success) {
      window.location.href = '/login.html';
      return;
    }

    const { username, role } = data.user;
    document.getElementById('welcomeText').innerText =
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}! –í–∞—à–∞ —Ä–æ–ª—å: ${role}`;

    const stats = await fetch('/dashboard/stats', { credentials: 'include' });
    const statData = await stats.json();
    if (statData.success) {
      document.getElementById('statsBox').innerHTML = `
        <div class="notif">
          <div class="left">
            <div class="msg">üì¶ –¢–æ–≤–∞—Ä–æ–≤</div>
            <div class="sub">${statData.products}</div>
          </div>
        </div>
        <div class="notif">
          <div class="left">
            <div class="msg">üßæ –ü—Ä–æ–¥–∞–∂</div>
            <div class="sub">${statData.sales}</div>
          </div>
        </div>
        <div class="notif">
          <div class="left">
            <div class="msg">üìë –û—Ç—á—ë—Ç–æ–≤</div>
            <div class="sub">${statData.reports}</div>
          </div>
        </div>
      `;
    }
  } catch {
    alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–µ–ª–∏');
  }

  const statsBtn = document.getElementById('loadStats');
  const statsBox = document.getElementById('statsBox');
  const chartCanvas = document.getElementById('statsChart');
  const toast = document.getElementById('toast');

  statsBtn.addEventListener('click', async () => {
    statsBox.innerHTML = 'üì° –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...';

    try {
      const res = await fetch('/admin/stats');
      const data = await res.json();

      if (data.success) {
        statsBox.innerHTML = `
          <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
          <ul style="list-style:none; padding:0; font-size:16px">
            <li>üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>${data.totalUsers}</b></li>
            <li>üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: <b>${data.totalItems}</b></li>
            <li>üí∞ –ü—Ä–æ–¥–∞–∂ —Å–µ–≥–æ–¥–Ω—è: <b>${data.salesToday}</b></li>
            <li>üîî –û–ø–æ–≤–µ—â–µ–Ω–∏–π: <b>${data.notifications}</b></li>
          </ul>
        `;

        new Chart(chartCanvas, {
          type: 'bar',
          data: {
            labels: ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', '–¢–æ–≤–∞—Ä—ã', '–ü—Ä–æ–¥–∞–∂–∏ —Å–µ–≥–æ–¥–Ω—è', '–û–ø–æ–≤–µ—â–µ–Ω–∏—è'],
            datasets: [{
              label: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
              data: [
                data.totalUsers,
                data.totalItems,
                data.salesToday,
                data.notifications
              ],
              backgroundColor: ['#4bc0c0', '#36a2eb', '#ffcd56', '#ff6384'],
              borderRadius: 5
            }]
          },
          options: {
            responsive: true,
            plugins: {
              legend: { display: false },
              title: {
                display: true,
                text: 'üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                color: '#fff',
                font: { size: 18 }
              }
            },
            scales: {
              x: { ticks: { color: '#fff' } },
              y: { ticks: { color: '#fff' } }
            }
          }
        });

        toast.classList.add('show');
        setTimeout(() => toast.classList.remove('show'), 3000);
      } else {
        statsBox.innerHTML = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É';
      }
    } catch (err) {
      statsBox.innerHTML = '‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
    }
  });
});
